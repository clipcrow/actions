import{JSXSlackError as p}from"../../error.mjs";import{JSXSlack as $}from"../../jsx.mjs";import{createComponent as d}from"../../jsx-internals.mjs";import{availableActionTypes as u}from"../layout/Actions.mjs";import{availableSectionAccessoryTypes as b}from"../layout/Section.mjs";import{resolveTagName as m,alias as g}from"../utils.mjs";const k=({aliases:a,availableBlockTypes:n,typesToCheckMissingLabel:r,name:e})=>d(e,({children:t})=>$.Children.toArray(t).reduce((y,o)=>{const f=m(o),c=$.isValidElement(o)&&typeof o.$$jsxslack.type=="string"&&a[o.$$jsxslack.type]&&g(o,a[o.$$jsxslack.type])||o;if(typeof c=="object"&&c){const s=c,l=n[s.type];if(l)return typeof l=="function"&&l(s),[...y,s];let i="";throw f&&(i=`Provided by ${f}`,(r||[]).includes(s.type)&&(i+='. Are you missing the definition of "label" prop to use the input component?')),new p(`<${e}> has detected an invalid block type as the layout block: "${s.type}"${i?` (${i})`:""}`,o)}return y},[])),v=(a=[...u])=>n=>{const e=(n.elements||[]).find(({type:t})=>!a.includes(t));if(e){const t=m(e);throw new p(`<Actions> block has detected an incompatible element with the root container${t?`: ${t}`:"."}`,e)}},w=(a=b)=>n=>{var r;const e=(r=n.accessory)==null?void 0:r.type;if(e&&!a.includes(e)){const t=m(n.accessory);throw new p(`<Section> block has detected an incompatible accessory with the root container${t?`: ${t}`:"."}`,n.accessory)}};export{v as generateActionsValidator,k as generateBlocksContainer,w as generateSectionValidator};
